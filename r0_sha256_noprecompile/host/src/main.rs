// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    SHA2_HASHER_RISC0_GUEST_ELF, SHA2_HASHER_RISC0_GUEST_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};
use std::fs::File;
use std::io::Read;

fn read_bytes_from_file(path: &str) -> std::io::Result<Vec<u8>> {
    let mut file = File::open(path)?;
    let mut buffer = Vec::new();
    file.read_to_end(&mut buffer)?;
    Ok(buffer)
}

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    for i in 1..15 {
        println!("RUNNING TEST {} -----------------------------", i);
        
        let input: &[u8] = &read_bytes_from_file(&format!("../testoutput/sha256/{}/input", 2usize.pow(i as u32) as usize)).unwrap();
        let output: &[u8] = &read_bytes_from_file(&format!("../testoutput/sha256/{}/output", 2usize.pow(i as u32) as usize)).unwrap();

        let input = hex::decode(&input).unwrap();
        let output = hex::decode(&output).unwrap();
        
        // println!("input: {:?}", input);
        // println!("output {}: {:?}", output.len(), output);

        let zkvm_input = core::HashingData {
            input: input.to_vec(),
            output: output.try_into().unwrap(),
        };

        let env = ExecutorEnv::builder()
            .write(&zkvm_input)
            .unwrap()
            .build()
            .unwrap();

        // Obtain the default prover.
        let prover = default_prover();

        // Proof information by proving the specified ELF binary.
        // This struct contains the receipt along with statistics about execution of the guest
        let prove_info = prover
            .prove(env, SHA2_HASHER_RISC0_GUEST_ELF)
            .unwrap();

        // extract the receipt.
        let receipt = prove_info.receipt;

        let output: bool = receipt.journal.decode().unwrap();
        assert!(output);

        receipt
            .verify(SHA2_HASHER_RISC0_GUEST_ID)
            .unwrap();
    }
}
